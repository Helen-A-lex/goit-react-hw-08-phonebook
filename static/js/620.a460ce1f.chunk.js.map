{"version":3,"file":"static/js/620.a460ce1f.chunk.js","mappings":"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","sources":["components/ContactForm/ContactForm.styled.js","components/ContactListItem/ContactListItem.styled.js","components/ContactListItem/ContactListItem.jsx","components/ContactList/ContactList.styled.js","components/ContactList/ContactList.jsx","components/ContactForm/ContactForm.jsx","components/Filter/Filter.jsx","components/App/App.styled.js","pages/Contacts.js"],"sourcesContent":["import styled from 'styled-components';\nimport { Form, Field } from 'formik';\n\nexport const FormWrap = styled(Form)`\n  border: 2px solid yellow;\n\n  border-radius: 40px;\n  background: linear-gradient(146deg, #6c6c66, transparent);\n  width: 400px;\n  height: 360px;\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  padding: 20px;\n  justify-content: space-between;\n  margin-bottom: 20px;\n  margin-right: auto;\n  margin-left: auto;\n`;\nexport const Label = styled.label`\n  display: flex;\n  flex-direction: column;\n  gap: 15px;\n  font-size: 15px;\n  font-weight: 600;\n  font-family: sans-serif;\n  color: rgb(217, 232, 64);\n`;\nexport const Input = styled(Field)`\n  width: 200px;\n  border: 1px solid #dcdbdb;\n  padding: 5px;\n  font-size: 15px;\n  outline: transparent;\n\n  &:focus {\n    border: 1px solid rgb(197 216 14);\n    box-shadow: rgb(207 226 21) 5px 0px 27px -8px;\n  }\n`;\nexport const ButtonAddDeleteContact = styled.button`\n  width: 100px;\n  padding: 5px;\n  background-color: white;\n  border: 1px solid #dedede;\n  font-size: 13px;\n  font-weight: 600;\n  border-radius: 6px;\n  cursor: pointer;\n\n  &:hover,\n  &:focus {\n    background-color: rgb(202 222 4);\n    box-shadow: 5px 0px 27px -8px rgba(91, 95, 206, 1);\n  }\n`;\n","import styled from 'styled-components';\nexport const ListItem = styled.li`\n  display: flex;\n  gap: 15px;\n  position: relative;\n  &::before {\n    content: '';\n    position: absolute;\n    left: -20px;\n    top: 10px;\n    width: 8px;\n    height: 8px;\n    border-radius: 50%;\n    background-color: black;\n  }\n`;\n","import PropTypes from 'prop-types';\nimport { ListItem } from './ContactListItem.styled';\nimport { ButtonAddDeleteContact } from 'components/ContactForm/ContactForm.styled';\nimport { deleteContact } from '../../redux/contacts/contacts-operations';\nimport { useDispatch } from 'react-redux';\nimport { fetchContacts } from '../../redux/contacts/contacts-operations';\nexport const ContactListItem = ({ contact }) => {\n  console.log(contact);\n  const dispatch = useDispatch();\n\n\n  const handleDeleteContact = async () => {\n    await dispatch(deleteContact(contact.id));\n    dispatch(fetchContacts());\n  };\n\n  return (\n    <>\n      <ListItem key={contact.id}>\n        {contact.name} : {contact.number} \n        <ButtonAddDeleteContact\n          onClick={handleDeleteContact}\n          \n        >\n          Delete\n        </ButtonAddDeleteContact>\n      </ListItem>\n    </>\n  );\n};\nContactListItem.propTypes = {\n  contact: PropTypes.object.isRequired,\n};\n","import styled from 'styled-components';\nexport const ContactsList = styled.ul`\n  margin-top: 20px;\n  margin-left: 40px;\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  font-size: 20px;\n`;\n","import { ContactListItem } from 'components/ContactListItem/ContactListItem';\nimport { ContactsList } from './ContactList.styled';\n\nimport { getFilterValue } from '../../redux/filterSlice';\nimport { selectContactsItems } from '../../redux/contacts/contactsSlice';\nimport { useSelector } from 'react-redux';\n\nexport const ContactList = () => {\n  const contacts = useSelector(selectContactsItems);\n\n  const filter = useSelector(getFilterValue);\n\n  const getFilteredContacts = (contacts, filter) => {\n   \n    if (filter) {\n      return contacts.filter(contact =>\n        contact.name.toLowerCase().includes(filter.toLowerCase())\n      );\n    } else {\n      return contacts;\n    }\n  };\n\n  const filteredContacts = getFilteredContacts(contacts, filter);\n\n  if (!filteredContacts || filteredContacts.length === 0) {\n    return <div>No contacts found</div>;\n  }\n  return (\n    <ContactsList>\n      {filteredContacts.map(contact => (\n        <ContactListItem key={contact.id} contact={contact} />\n      ))}\n    </ContactsList>\n  );\n};\n","import {\n  FormWrap,\n  Label,\n  Input,\n  ButtonAddDeleteContact,\n  \n} from './ContactForm.styled';\nimport {  ErrorMessage, Formik } from 'formik';\nimport * as Yup from 'yup';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectContactsItems } from '../../redux/contacts/contactsSlice';\nimport { addContact } from 'redux/contacts/contacts-operations';\n\nexport default function ContactForm() {\n  const initialValues = { name: '', number: '' };\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContactsItems);\n\n  const handleSubmit = (values, { resetForm }) => {\n    const { name, number } = values;\n\n    const isDuplicateName = contacts.find(\n      contact => contact.name.toLowerCase() === name.toLowerCase()\n    );\n\n    if (isDuplicateName) {\n      alert(`${name} is already in contacts`);\n      return;\n    }\n\n    dispatch(addContact({ name, number }));\n\n    resetForm();\n  };\n  const schema = Yup.object().shape({\n    name: Yup.string().required().min(4),\n    number: Yup.number().min(4).required(),\n  });\n  return (\n    <Formik\n      initialValues={initialValues}\n      validationSchema={schema}\n      onSubmit={handleSubmit}\n    >\n      <FormWrap>\n        <Label htmlFor=\"user_name\">\n          Name\n          <Input type=\"text\" name=\"name\" />\n          <ErrorMessage name=\"name\" />\n        </Label>\n\n        <Label htmlFor=\"user_tel\">\n          Number\n          <Input type=\"tel\" name=\"number\" />\n          <ErrorMessage name=\"number\" />\n        </Label>\n        <ButtonAddDeleteContact type=\"submit\">\n          Add contact\n        </ButtonAddDeleteContact>\n      </FormWrap>\n    </Formik>\n  );\n}\n","import { Label, Input } from 'components/ContactForm/ContactForm.styled';\nimport { getFilterValue, setFilter } from '../../redux/filterSlice';\nimport { useDispatch, useSelector } from 'react-redux';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(getFilterValue);\n\n  const changeFilter = evt => {\n    return dispatch(setFilter(evt.target.value));\n  };\n\n  return (\n    <Label>\n      Find contacts by name\n      <Input type=\"text\" value={filter} onChange={changeFilter} />\n    </Label>\n  );\n};\n","import styled from 'styled-components';\nexport const Title = styled.h1`\n  font-size: 30px;\n  margin-bottom: 30px;\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { useEffect } from 'react';\nimport { fetchContacts } from 'redux/contacts/contacts-operations';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport ContactForm from 'components/ContactForm/ContactForm';\nimport { Filter } from 'components/Filter/Filter';\nimport { Title } from '../components/App/App.styled';\nimport { selectIsLoading } from '../redux/contacts/contactsSlice';\nimport { selectError } from '../redux/contacts/contactsSlice';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      {isLoading && !error && <b>Request in progress...</b>}\n      <ContactList />\n      <Title>Add new contact</Title>\n      <ContactForm />\n      <Title>Find the desired contact</Title>\n      <Filter />\n    </>\n  );\n}\n"],"names":["FormWrap","styled","Form","Label","Input","Field","ButtonAddDeleteContact","ListItem","ContactListItem","contact","console","log","dispatch","useDispatch","handleDeleteContact","deleteContact","id","fetchContacts","name","number","onClick","ContactsList","ContactList","filteredContacts","contacts","filter","toLowerCase","includes","getFilteredContacts","useSelector","selectContactsItems","getFilterValue","length","map","ContactForm","schema","Yup","shape","required","min","initialValues","validationSchema","onSubmit","values","resetForm","find","alert","addContact","htmlFor","type","Filter","value","onChange","evt","setFilter","target","Title","Contacts","isLoading","selectIsLoading","error","selectError","useEffect"],"sourceRoot":""}