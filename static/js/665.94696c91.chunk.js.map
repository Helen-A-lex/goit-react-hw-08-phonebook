{"version":3,"file":"static/js/665.94696c91.chunk.js","mappings":"6PAWe,SAASA,IACtB,IAEMC,GAAWC,EAAAA,EAAAA,MAkBXC,EAASC,EAAAA,KAAaC,MAAM,CAChCC,KAAMF,EAAAA,KAAaG,WAAWC,IAAI,GAClCC,MAAOL,EAAAA,KAAaI,IAAI,GAAGD,WAC3BG,SAAUN,EAAAA,KAAaI,IAAI,GAAGG,IAAI,IAAIJ,aAEpCK,GAASC,EAAAA,EAAAA,IAAU,CACrBC,cA1BoB,CAAER,KAAM,GAAIG,MAAO,GAAIC,SAAU,IA2BrDK,SAvBmB,SAACC,EAAD,GAA4B,IAAjBC,EAAgB,EAAhBA,UAC9BC,QAAQC,IAAIH,GACZ,IAAQV,EAA0BU,EAA1BV,KAAMG,EAAoBO,EAApBP,MAAOC,EAAaM,EAAbN,SAGrBT,GACEmB,EAAAA,EAAAA,IAAS,CACPd,KAAAA,EACAG,MAAAA,EACAC,SAAAA,KAIJO,GACD,EAUCI,iBAAkBlB,IAEpB,OAMI,UAAC,KAAD,CAAUY,SAAWH,EAAOU,aAA5B,WACE,UAAC,KAAD,CAAOC,QAAQ,YAAf,UAA2B,YAEzB,SAAC,MAAD,QAAOC,KAAK,OAAOlB,KAAK,QAAWM,EAAOa,cAAc,WACxD,SAAC,KAAD,CAAcnB,KAAK,aAGrB,UAAC,KAAD,CAAOiB,QAAQ,aAAf,UAA4B,SAE1B,SAAC,MAAD,QAAOC,KAAK,QAAQlB,KAAK,SAAYM,EAAOa,cAAc,YAC1D,SAAC,KAAD,CAAcnB,KAAK,cAGrB,UAAC,KAAD,CAAOiB,QAAQ,gBAAf,UAA+B,YAE7B,SAAC,MAAD,QAAOC,KAAK,WAAWlB,KAAK,YAAeM,EAAOa,cAAc,eAChE,SAAC,KAAD,CAAcnB,KAAK,iBAErB,SAAC,KAAD,CAAwBkB,KAAK,SAA7B,SAAsC,eAI7C,CCrEc,SAASE,IACtB,OACE,0BACE,SAAC1B,EAAD,KAGL,C","sources":["components/RegisterForm/RegisterForm.jsx","pages/Register.js"],"sourcesContent":["import { useDispatch } from 'react-redux';\nimport { register } from '../../redux/auth/auth-operations';\nimport {\n  FormWrap,\n  Label,\n  Input,\n  ButtonAddDeleteContact,\n} from 'components/ContactForm/ContactForm.styled';\nimport { ErrorMessage, useFormik } from 'formik';\nimport * as Yup from 'yup';\n\nexport default function RegisterForm() {\n  const initialValues = { name: '', email: '', password: '' };\n\n  const dispatch = useDispatch();\n\n  const handleSubmit = (values, { resetForm }) => {\n    console.log(values);\n    const { name, email, password } = values;\n    \n\n    dispatch(\n      register({\n        name,\n        email,\n        password,\n      })\n    );\n\n    resetForm();\n  };\n\n  const schema = Yup.object().shape({\n    name: Yup.string().required().min(4),\n    email: Yup.string().min(4).required(),\n    password: Yup.string().min(5).max(16).required(),\n  });\nconst formik = useFormik({\n    initialValues,\n    onSubmit: handleSubmit,\n    validationSchema: schema,\n  });\n  return (\n    // <Formik\n    //   initialValues={initialValues}\n    //   validationSchema={schema}\n    //   onSubmit={handleSubmit}\n    // >\n      <FormWrap onSubmit ={formik.handleSubmit}>\n        <Label htmlFor=\"user_name\">\n          Username\n          <Input type=\"text\" name=\"name\" {...formik.getFieldProps('name')}/>\n          <ErrorMessage name=\"name\" />\n        </Label>\n\n        <Label htmlFor=\"user_email\">\n          Email\n          <Input type=\"email\" name=\"email\" {...formik.getFieldProps('email')}/>\n          <ErrorMessage name=\"email\" />\n        </Label>\n\n        <Label htmlFor=\"user_password\">\n          Password\n          <Input type=\"password\" name=\"password\" {...formik.getFieldProps('password')}/>\n          <ErrorMessage name=\"password\" />\n        </Label>\n        <ButtonAddDeleteContact type=\"submit\">Register</ButtonAddDeleteContact>\n      </FormWrap>\n    // </Formik>\n  );\n}\n","import RegisterForm from 'components/RegisterForm/RegisterForm';\nexport default function Register() {\n  return (\n    <div>\n      <RegisterForm />\n    </div>\n  );\n}\n"],"names":["RegisterForm","dispatch","useDispatch","schema","Yup","shape","name","required","min","email","password","max","formik","useFormik","initialValues","onSubmit","values","resetForm","console","log","register","validationSchema","handleSubmit","htmlFor","type","getFieldProps","Register"],"sourceRoot":""}